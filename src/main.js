/* ----------------------------------------------
 * Generated by CaesarDeveloper on 2022-6-16 0:57:35
 * For more info contact at: caesararg.dev@gmail.com
 * Licensed under MIT License.
 * Main script to render DC Gaskets webpage.
 * DCGaskets: @init, @i18Loader, @updateContent, @niceSelectInit
 * ---------------------------------------------- */
import "./main.css";
import "./responsive.css";
import LoadingScreen from './components/loadingScreen.js'
import App from "./components/app.js";
import json_en from './assets/i18n/en.json';
import json_es from './assets/i18n/es.json';

(($) => {

    let i18Jsons = [];

    Object.assign(window, {
        $: jQuery,
        jQuery
    })


    const DCGaskets = (() => {
        const init = () => {
            const start = new Date();
            const loadingScreen = new LoadingScreen();
            const app = new App();
            try {
                console.log('Iniciando app...');
                i18Jsons.push(json_es);
                i18Jsons.push(json_en);
                document.body.insertAdjacentHTML("afterbegin", loadingScreen.render());
                document.querySelector('body').classList.add('stop-scrolling');
                document.getElementById("app").insertAdjacentHTML("afterbegin", app.render());
            } catch (error) {
                console.error(error);
            } finally {
                console.log('App iniciada...', start.getMilliseconds());
                setTimeout(() => {
                    loadingScreen.dissmiss();
                    document.querySelector('body').classList.remove('stop-scrolling');
                }, 3000);
                niceSelectInit();
                i18Loader();
            }
        }

        const i18Loader = async () => {

            const langs = ["es", "en"];

            const res = langs.reduce((acc, l, idx) => {
                acc[l] = {
                    translation: i18Jsons[idx]
                };
                return acc;
            }, {});
            await i18next.init({
                lng: "es",
                debug: false,
                resources: res
            });
            updateContent();
            i18next.on("languageChanged", () => {
                updateContent();
            });
            const langSelector = document.getElementById("langSelector");
            langSelector.removeAttribute("disabled");

            $('#langSelector').on('change', function (e) {
                i18next.changeLanguage(e.target.value);

                switch (e.target.value) {
                    case "es":
                        $(".nice-select>.current").prepend('<i class="flag-icon flag-icon-mx"></i> ');
                        break;

                    case "en":
                        $(".nice-select>.current").prepend('<i class="flag-icon flag-icon-us"></i> ');
                        break;

                    default:
                        $(".nice-select>.current").prepend('<i class="flag-icon flag-icon-mx"></i> ');
                        break;
                }

            });
        }

        const updateContent = () => {
            const elements = document.getElementsByClassName("i18nelement");
            for (let i = 0; i < elements.length; i++) {
                const element = elements[i];
                const k = element.getAttribute("data-i18n");
                element.innerHTML = i18next.t(k);
            }
        }

        const niceSelectInit = () => {
            $("#langSelector").niceSelect();
            $(".nice-select>ul.list>li.option[data-value='en']").prepend('<i class="flag-icon flag-icon-us"></i> ');
            $(".nice-select>ul.list>li.option[data-value='es']").prepend('<i class="flag-icon flag-icon-mx"></i> ');
            $(".nice-select>.current").prepend('<i class="flag-icon flag-icon-mx"></i> ');
        }

        return {
            init: init
        };
    })();


    $(document).ready(function () {
        DCGaskets.init();

        let nav = document.querySelector('nav');
        window.addEventListener('scroll', function () {
            if (window.pageYOffset > 100) {
                nav.classList.add('bg-dark-transparent', 'shadow');
            } else {
                nav.classList.remove('bg-dark-transparent', 'shadow');
            }
        });


        const swiper = new Swiper('.swiper', {
            // Default parameters
            slidesPerView: 2,
            spaceBetween: 10,
            grabCursor: true,

            // Responsive breakpoints
            breakpoints: {
                // when window width is >= 320px
                320: {
                    slidesPerView: 2,
                    spaceBetween: 20
                },
                // when window width is >= 480px
                480: {
                    slidesPerView: 3,
                    spaceBetween: 30
                },
                // when window width is >= 1200px
                1200: {
                    slidesPerView: 6,
                    spaceBetween: 40
                }
            }
        })

    });
})(jQuery);